Для начала работы с эмуляторами нужно обязательно настроить OS для этого. (Hyper-V) см. модуль 37



Расширения

	x:Static			ссылка на статические свойства, поля, перечисления enum
		(Это расширение позволяет передавать в страницу значения переменных и констант из кода С#.)
	x:Type				атрибут типа объекта
	x:Array				создание массива объектов одного какого-либо типа
	x:Null				присваивание атрибуту значения null
	x:Reference			ссылки на именованные элементы страницы
	StaticResource		ссылки на объекты
	DynamicResource		отслеживание изменений ресурса
	Binding				для установки связи между свойствами двух объектов (привязку данных рассмотрим позже)





Контейнеры компановки

	StackLayout — уже известный вам контейнер, который располагает вложенные элементы друг за другом. 
		Причём не обязательно вертикально, как у нас. Горизонтальная ориентация тоже возможна.
			Свойства
				[
					Children - дочерние элементы
					Orientation - направление расположения элементов
					Spacing - расстояние между элементами
				]

			ScrollView - позволяет уместить большое количество элементов на одном экране с помощью применения прокрутки.




	AbsoluteLayout — позволяет задать абсолютное расположение вложенных элементов. 

		Метод AbsoluteLayout.Children.Add(...), если мы это делаем с помощью С#-кода, имеет для этого несколько модификаций:

		Add(View view) — обычное добавление элемента в контейнер с позицией по умолчанию;
		Add(View view, Point point) — добавляем элемент, помещая его в точку Point;
		Add(View view, Rectangle rectangle) — добавляем элемент в определенную область экрана, ограниченную прямоугольником Rectangle.

		Для определения, какие именно величины в конфигурации элемента считать абсолютными, а какие — относительными, мы можем использовать тип-перечисление AbsoluteLayoutFlags.

		AbsoluteLayoutFlags
		Может использоваться с такими значениями:
			None	все значения являются абсолютными
			All	все значения относительные
			WidthProportional	ширина будет относительной, остальное — в абсолютных величинах
			HeightProportional	высота относительная, остальное нет
			XProportional	координата X относительная
			YProportional	координата Y относительная
			PositionProportional	обе координаты, задающие позицию (X и Y), считаются относительными
			SizeProportional	оба размера (ширина и высота) являются относительными



	RelativeLayout — противоположно AbsoluteLayout, позволяет расположить дочерние элементы относительно 
	самого лейаута или других элементов того же уровня.

		В XAML мы можем описывать размеры и позицию элементов, находящихся внутри RelativeLayout с помощью особых свойств.

		Вот основные:
			XConstraint — расположение относительно оси X.
			YConstraint — расположение относительно оси Y.
			HeightConstraint — высота.
			WidthConstraint — ширина.

		Причем последние два из этих свойств (высота и ширина) устанавливаются обычным числовым значением.
		А вот для того чтобы задать XConstraint и YConstraint потребуется воспользоваться расширением разметки ConstraintExpression.



Grid  — позволяет так или иначе упорядочить дочерние элементы по строкам и столбцам 
(которые могут иметь как абсолютные, так и относительно-пропорциональные размеры).

FlexLayout — относительно новый контейнер (появился в Xamarin 3.0). Основан на адаптивном CSS-контейнере Flexible Box Layout Module. 
Похож на StackLayout тем, что позволяет расположить дочерние элементы друг за другом горизонтально или вертикально. Но имеет и некоторые другие преимущества.
К примеру, с его помощью можно уместить довольно большое количество дочерних элементов в один ряд или столбец (их размер будет адаптивным).
Также FlexLayout имеет много настроек для того, чтобы задать нужную ориентацию, выравнивание или адаптацию под определённые размеры экрана.




Работа с изображениями
Для задания фона отдельного окна в теге ContentPage исползовать аттрибут BackgroundImageSource указав путь до изображения

	Android
		Добавить нужное изображение в папку Resources/drawable/

	IOS
		В Каталог активов(AssetsCatalog)/Assets добавить нужное изображение (нажав соответствующую кнопку для добавления нового элемента). Сохранить изменения

	UWP
		Можно скопировать изображение куда угодно. Проставить в свойствах BuildAction => Content; Copy to output directory => Do not copy;